function animate_result(Input_Data, platform_stl, layer_stl, video_filename, speed, platform_scale, layer_scale, smoothing)
%ANIMATE_RESULT Render simulation of multivehicle swarm tracking
%function animate_result(Input_Data, platform_stl, layer_stl, video_filename, speed, model_scale)
%inputs:
%   Input_Data = Data structure generated by animate_swarm_Demo.m
%   platform_stl = String filename with platform 3D stl model
%   layer_stl = String filename with 'layer' respresentation stl model
%   video_filename = String with video filename to create filename.avi 
%   speed = simulation time/video time
%   platform_scale = size to render platform to make it visible
%   layer_scale = size to render layer to make it visible
%   smoothing = smooth motion of layer with moving average
%
%outputs:
%   none (saved to filename.avi)
%
%dependencies:
%
%See also ANIMATE_SWARM_DEMO

%Extract Data from imput data structure
T_space = Input_Data.Density_Plot.T_space;
x_esti = Input_Data.Density_Plot.x_esti;
Zeta = Input_Data.Density_Plot.Zeta;
t = Input_Data.t_space;
est_error = Input_Data.error;

n_platforms = 2;

fps = 30;
dt = (1/fps)*speed;

%Load STL Models
[Vertices_b,faces,normals,name] = stlRead(platform_stl);
[Vertices_layer, faces_layer, normals_layer, name_layer] = stlRead(layer_stl);

%Platform rendering characteristics
platform(1).color = [0.1 0.1 0.1]; %Dark Gray
platform(1).object.vertices = Vertices_b*platform_scale;
platform(1).object.faces = faces;
platform(1).z = -Input_Data.Platform(1).z;
platform(1).z_sm = movmean(-Input_Data.Platform(1).z, smoothing);

platform(2).color = [1 0.647 0]; %Orange
platform(2).object.vertices = Vertices_b*platform_scale;
platform(2).object.faces = faces;
platform(2).z = -Input_Data.Platform(2).z;
platform(2).z_sm = movmean(-Input_Data.Platform(2).z, smoothing);

%Layer Rendering Characteristics
layer.object.vertices = Vertices_layer*layer_scale;
layer.object.faces = faces_layer;
layer.color = [1,0,0]; %Red squid
layer.z = -Input_Data.Layer.z;
layer.z_sm = movmean(-Input_Data.Layer.z,smoothing);

%Extract vectors from Sim_State
n = length(t);

%Determine max and min values for the renders and curves
min_t = min(t);
max_t = max(t);
min_z = min(min(platform(:).z))-10;
max_z = max(max(platform(:).z))+10;
range_z = max_z-min_z;
middle_z = mean([min_z max_z]);
min_z_plot = middle_z-(range_z*1.1)/2;
max_z_plot = middle_z+(range_z*1.1)/2;
range_z_plot = max_z_plot - min_z_plot;
x_range = range_z_plot/4;
y_range = x_range;
min_x_plot = 0-x_range/2;
max_x_plot = 0+x_range/2;
min_y_plot = 0-y_range/2;
max_y_plot = 0+y_range/2;
max_est_error = max(est_error);
min_est_error = min(est_error);

h1 = figure('Position',[0 0 1920 1080]);
set(gcf,'color','w');
disp('Please position and size plot window for rendering');
input('Press any Enter to continue');
disp('Rendering...')

model_axis = subplot(4,4,[1 5 9 13]);
density_axis = subplot(4,4,[2 3 4 6 7 8 10 11]);
error_axis = subplot(4,4,[14 15 16]);


%Create output video file
current_directory = cd;
clock_time = clock;
date_time = date;
complete_filename = [current_directory '\Outputs\' date_time '-' num2str(clock_time(4)) num2str(clock_time(5)) '-' video_filename];
vidObj = VideoWriter(complete_filename);
open(vidObj);

frame_time = 0;
index = 1;
while(index<=n)
    if (t(index)>frame_time+dt)
        frame_time = frame_time+dt;
 
        %plot Platforms
        delete(model_axis); %delete the figure to refresh
        
        hold on;
        model_axis = subplot(4,4,[1 5 9 13]);
        platform_index = 0;
        while(platform_index<n_platforms)
            platform_index = platform_index + 1;
            %stlPlot(Vertices_i+eta1,faces,['t = ', num2str(frame_time,'%0.2f')]);
            platform_color = platform(platform_index).color;
            platform_object = platform(platform_index).object;
            z = platform(platform_index).z_sm(index);
            platform_object.vertices = platform_object.vertices + [0,0,z];
            patch((platform_object),'FaceColor',       platform_color, ...
                 'EdgeColor',       'none',        ...
                 'FaceLighting',    'gouraud',     ...
                 'AmbientStrength', 0.10);
            set(gca,'Zdir','reverse','Ydir','reverse')
            camlight('headlight');
            material('shiny');
            axis equal;
            view(45, 35);
            grid on;
            %axis ([-1.5 1.5 -1.5 1.5 -1 1]);
            %axis ([-3 3 -3 3 -12 12]);
            axis([min_x_plot max_x_plot min_y_plot max_y_plot min_z_plot max_z_plot]);
            title_str = ['Time = ', num2str(t(index), '%0.2f'), ' hrs'];
            %xlabel('x');
            %ylabel('y');
            set(gca,'XTick',[])
            set(gca,'YTick',[])
            zlabel('Depth [m]');
            title(title_str);
        end

        
        %plot Layer
        layer_object = layer.object;
        layer_color = layer.color;
        z = layer.z_sm(index);
        layer_object.vertices = layer_object.vertices + [0,0,z];
        patch((layer_object),'FaceColor',       layer_color, ...
             'EdgeColor',       'none',        ...
             'FaceLighting',    'gouraud',     ...
             'AmbientStrength', 0.10);
        set(gca,'Zdir','reverse','Ydir','reverse')
        camlight('headlight');
        material('shiny');
        axis equal;
        view(45, 35);
        grid on;
        %axis ([-1.5 1.5 -1.5 1.5 -1 1]);
        %axis ([-3 3 -3 3 -12 12]);
        axis([min_x_plot max_x_plot min_y_plot max_y_plot min_z_plot max_z_plot]);
        title_str = ['Depth = ', num2str(z, '%0.2f'), ' m'];
        %xlabel('x');
        %ylabel('y');
        set(gca,'XTick',[])
        set(gca,'YTick',[])
        zlabel('Depth [m]');
        %title(title_str);

        hold off;
        
        %Plot Density Axis
        delete(density_axis);
        density_axis = subplot(4,4,[2 3 4 6 7 8 10 11]);
        title('Depth vs. Time');
        hold on
        h = surf(T_space,Zeta,(x_esti));
        view(0,90)
        axis tight;
        shading interp
        colorbar
        co = colorbar;
        co.Label.String = 'Density';
        %co.FontSize = 20;
        
        %Change to positive 'Depth'
        yticks([-800 -700 -600 -500 -400 -300 -200 -100 0]);
        yticklabels({'800' '700' '600' '500' '400' '300' '200' '100' '0'})
        ylabel('Depth [m]');
        xlabel('Time [hrs]');
        %Platform 1
        plot3(t(1:index),-platform(1).z(1:index),250*ones(1,length(t(1:index))),'LineWidth',2, 'Color',platform(1).color);
        plot3(t(index),-platform(1).z(index), 250*ones(1,length(t(1:index))), 'dk', 'color', platform(1).color, 'MarkerSize',20,'LineWidth', 3);
        plot3(t(1:index),-platform(2).z(1:index),250*ones(1,length(t(1:index))),'LineWidth',2, 'Color', platform(2).color);
        plot3(t(index),-platform(2).z(index), 250*ones(1,length(t(1:index))), 'dk', 'color', platform(2).color, 'MarkerSize',20,'LineWidth', 3);
        
        plot3(t(1:index),-layer.z(1:index),250*ones(1,length(t(1:index))),'--', 'LineWidth',1, 'Color', layer.color);
        hold off


        %Plot Error Axis
        delete(error_axis);
        subplot(4,4,[14 15 16]);
        title('Error vs. Time');
        plot(t(1:index), est_error(1:index), 'k');
        axis([min_t, max_t, min_est_error, max_est_error]);
        
        drawnow;

        writeVideo(vidObj,getframe(gcf)); %Write frame to video file
        hold off
    end
       
    index = index+1;
end

close(vidObj); %close video file
close; %close the rendering figure


        
        
